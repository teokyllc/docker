name: Runners

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - 'main'
    paths:
      - 'Actions-Runner/**'
      - '!Actions-Runner/Makefile'
      - '.github/workflows/runners.yaml'
      - '!**.md'
  push:
    branches:
      - 'main'
    paths:
      - 'Actions-Runner/**'
      - '!Actions-Runner/Makefile'
      - '.github/workflows/runners.yaml'
      - '!**.md'

env:
  RUNNER_VERSION: 2.298.2
  DOCKER_VERSION: 20.10.12
  DUMB_INIT_VERSION: 1.2.5
  BUILDX_VERSION: 0.9.1
  CONTAINER_REGISTRY: cr.teokyllc.internal
  CR_USERNAME: ataylor
  VAULT_ADDR: "https://vault.teokyllc.internal:8200"
  VAULT_TOKEN: ${{secrets.VAULT_TOKEN}}

jobs:
  build-runners:
    name: Build ${{ matrix.name }}-${{ matrix.os-name }}-${{ matrix.os-version }}
    runs-on: [self-hosted]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: actions-runner-dind
            os-name: ubuntu
            os-version: 20.04
          # - name: actions-runner-dind-rootless
          #   os-name: ubuntu
          #   os-version: 20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=sha_short::${GITHUB_SHA::8}
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx context
        run: |
          mkdir /home/runner/.docker || echo "exists"
          mkdir /home/runner/.docker/cli-plugins || echo "exists"
          wget https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.linux-amd64 -P /home/runner/.docker/cli-plugins
          mv /home/runner/.docker/cli-plugins/buildx-v0.9.1.linux-amd64  /home/runner/.docker/cli-plugins/docker-buildx
          chmod +x /home/runner/.docker/cli-plugins/docker-buildx
          docker buildx install

          docker context create tls-env
          docker buildx create tls-env

      - name: Login to DockerHub
        if: ${{ github.event_name == 'release' || github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ env.CR_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and Push Versioned Tags
        uses: docker/build-push-action@v3
        with:
          context: ./Actions-Runner
          file: ./Actions-Runner/${{ matrix.name }}.dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          build-args: |
            RUNNER_VERSION=${{ env.RUNNER_VERSION }}
            DOCKER_VERSION=${{ env.DOCKER_VERSION }}
            DUMB_INIT_VERSION=${{ env.DUMB_INIT_VERSION }}
            BUILDX_VERSION=${{ env.BUILDX_VERSION }}
            VAULT_ADDR=${{ env.VAULT_ADDR }}
            VAULT_TOKEN=${{ env.VAULT_TOKEN }}
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ matrix.name }}:v${{ env.RUNNER_VERSION }}-${{ matrix.os-name }}-${{ matrix.os-version }}-${{ steps.sha.outputs.sha_short }}
            ${{ env.CONTAINER_REGISTRY }}/${{ matrix.name }}:latest

      - name: Release the new image
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
            mkdir ~/.kube
            vault kv get -mount=kv -field=kubeconfig kubeconfig > ~/.kube/config
            sudo chmod o-r ~/.kube/config && sudo chmod g-r ~/.kube/config
            helm repo add actions-runner-controller \
              https://actions-runner-controller.github.io/actions-runner-controller
            helm upgrade --install \
              --namespace actions-runner-system \
              --create-namespace \
              --set=authSecret.enabled=true \
              --set=authSecret.create=true \
              --set=authSecret.github_token=$(vault kv get -mount=kv -field=pat github) \
              --set=image.actionsRunnerRepositoryAndTag="${{ env.CONTAINER_REGISTRY }}/${{ matrix.name }}:v${{ env.RUNNER_VERSION }}-${{ matrix.os-name }}-${{ matrix.os-version }}-${{ steps.sha.outputs.sha_short }}" \
              --set=image.actionsRunnerImagePullSecrets[0]=acr-access \
              actions-runner-controller \
              actions-runner-controller/actions-runner-controller
            cat <<EOF | kubectl apply -f -
            apiVersion: actions.summerwind.dev/v1alpha1
            kind: RunnerDeployment
            metadata:
              name: runnerdeploy
            spec:
              replicas: 1
              template:
                spec:
                  organization: teokyllc
            EOF